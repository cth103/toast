#!/usr/bin/python
#
#    Copyright (C) 2012-2014 Carl Hetherington <cth@carlh.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

have_gpio = True
try:
    import RPi.GPIO
except:
    have_gpio = False

import BaseHTTPServer
import threading
import json
import time
import os
import sys
import datetime
import socket
import argparse
import urlparse

# GPIO pin of heating relay
HEATING = 2
# 1-wire bus sensor ID for temperature
SENSOR = '28-0000063fb15e'
# Hysteresis in degrees
HYSTERESIS = 0.5
# Interval in seconds to check state and update hardware
CHECK_INTERVAL = 1
# Minutes to keep temperatures in memory
MEMORY_LOG_MINUTES = 60 * 24 * 7

# True if we have already warned about not being able to find the 1-wire bus sensor
warned_about_owb = False
# Current fake temperature if we are in test mode (with no temperature sensor)
test_temperature = 15.0
# True to stop all threads
stop = False
# Server which talks to clients
server = None
# True to write logs, false if not
write_logs = True
current_rule = None

class Error(Exception):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return self.value
    def __repr__(self):
        return str(self)

def warning(w):
    print 'WARNING: %s' % w

def verbose(v):
    print v

def debug(d):
    global args
    if args.debug:
        print d

class JSONServer:
    def __init__(self, port):
        # Port number to listen on
        self.port = port
        # Active client sockets
        self.clients = []
        # Mutex for self.clients
        self.mutex = threading.Lock()

    # Start the server
    def start(self):
        for res in socket.getaddrinfo(None, self.port, socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_PASSIVE):
            af, socktype, proto, canonname, sa = res
            try:
                s = socket.socket(af, socktype, proto)
            except socket.error as msg:
                s = None
                continue

            try:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.bind(sa)
                s.listen(1)
            except socket.error as msg:
                s.close()
                s = None
                continue

            break

        if s is None:
            raise Error('could not open socket (%s)' % msg)

        self.accept_thread = threading.Thread(target=self.run, args=(s,))
        self.accept_thread.start()
    
    # Thread which listens for incoming connections
    def run(self, sock):
        while True:
            conn, addr = sock.accept()
            conn.settimeout(2)
            threading.Thread(target=self.client, args=(conn,)).start()

    # Try to get some amount of data from a socket
    def get_data(self, sock, length):
        all = ""
        got = 0
        while got < length:
            d = sock.recv(length - got)
            if not d:
                break
            all += d
            got += len(d)

        return all
        
    # Thread to handle one client session
    def client(self, conn):
        with self.mutex:
            self.clients.append(conn)

        try:
            while True:
                s = self.get_data(conn, 4)
                if len(s) < 4:
                    break

                size = (ord(s[0]) << 24) | (ord(s[1]) << 16) | (ord(s[2]) << 8) | ord(s[3])
                s = self.get_data(conn, size)
                if len(s) != size:
                    break

                j = json.loads(s);
                if j['type'] == 'ping':
                    self.send({'type': 'pong'})
                else:
                    debug('<- %s' % json.dumps(j))
                    self.handler(j)
        except Exception as e:
            warning(str(e))
                    
        with self.mutex:
            self.clients.remove(conn)

        conn.close()

    def send(self, d):
        if not 'type' in d or d['type'] != 'pong':
            debug('-> %s' % json.dumps(d))

        with self.mutex:
            for c in self.clients:
                s = json.dumps(d)
                length = bytearray(4)
                length[0] = (len(s) >> 24) & 0xff
                length[1] = (len(s) >> 16) & 0xff
                length[2] = (len(s) >>  8) & 0xff
                length[3] = (len(s) >>  0) & 0xff
                c.sendall(length)
                c.sendall(s)

# Rule for when heating should be on
class Rule:
    
    MONDAY = 1 << 0
    TUESDAY = 1 << 1
    WEDNESDAY = 1 << 2
    THURSDAY = 1 << 3
    FRIDAY = 1 << 4
    SATURDAY = 1 << 5
    SUNDAY = 1 << 6

    next_id = 0

    def __init__(self, days=0, on_hour=None, on_minute=None, off_hour=None, off_minute=None):
        self.id = Rule.next_id
        Rule.next_id += 1
        self.days = days
        self.on_hour = on_hour
        self.on_minute = on_minute
        self.off_hour = off_hour
        self.off_minute = off_minute

    def read_dict(self, data):
        if 'id' in data:
            self.id = data['id']
        else:
            self.id = Rule.next_id
            Rule.next_id += 1
        self.days = data['days']
        self.on_hour = data['on_hour']
        self.on_minute = data['on_minute']
        self.off_hour = data['off_hour']
        self.off_minute = data['off_minute']

    def as_dict(self):
        return {"id": self.id,
                "days": self.days,
                "on_hour": self.on_hour,
                "on_minute": self.on_minute,
                "off_hour": self.off_hour,
                "off_minute": self.off_minute}

    def active(self, time=None):
        if time is None:
            time = datetime.datetime.now()
        if (self.days & (1 << time.weekday())) == 0:
            return False

        if self.on_hour > time.hour or self.off_hour < time.hour:
            return False

        on_ok = self.on_hour < time.hour or self.on_minute <= time.minute
        off_ok = self.off_hour > time.hour or self.off_minute > time.minute

        return on_ok and off_ok

    def __str__(self):
        return '%d: %d %d:%d %d:%d' % (self.id, self.days, self.on_hour, self.on_minute, self.off_hour, self.off_minute)

    def __eq__(self, other):
        if other is None:
            return False

        on_same = self.on_hour == other.on_hour and self.on_minute == other.on_minute
        off_same = self.off_hour == other.off_hour and self.off_minute == other.off_minute

        return self.id == other.id and self.days == other.days and on_same and off_same

    def __ne__(self, other):
        return not self.__eq__(other)



class State:
    """State of the heating system"""
    def __init__(self):
        global args

        self.target = 21
        self.on = False
        self.enabled = False
        self.temperatures = []
        self.rules = []

        self.mutex = threading.Lock()


    # Set methods for use by the server

    def set_target(self, target):
        changed = False
        with self.mutex:
            if abs(target - self.target) > 1e-6:
                self.target = target
                changed = True
        if changed:
            server.send(self.as_dict("target"))

    def set_on(self, on):
        changed = False
        with self.mutex:
            if on != self.on:
                self.on = on
                if have_gpio:
                    RPi.GPIO.output(HEATING, self.on)
                changed = True
        if changed:
            server.send(self.as_dict("on"))

    def set_enabled(self, enabled):
        changed = False
        with self.mutex:
            if enabled != self.enabled:
                self.enabled = enabled
                changed = True
        if changed:
            server.send(self.as_dict("enabled"))

    def set_temperatures(self, temperatures):
        with self.mutex:
            self.temperatures = temperatures
        server.send(self.as_dict("temperatures"))

    def add_temperature(self, t):
        with self.mutex:
            self.temperatures.append(t)
            if len(self.temperatures) > MEMORY_LOG_MINUTES:
                state.temperatures.pop(0)
        server.send(self.as_dict("temperatures"))

    def set_rules(self, r):
        assert(type(r) is list)
        changed = False
        with self.mutex:
            if self.rules != r:
                self.rules = r
                changed = True
        if changed:
            server.send(self.as_dict("rules"))

    # Get methods for use by the server

    def get_current_temperature(self):
        t = 0.0
        with self.mutex:
            if len(self.temperatures) > 0:
                t = self.temperatures[-1]
        return t

    def get_target(self):
        with self.mutex:
            return self.target

    def get_active_rule(self):
        with self.mutex:
            active_rules = [r for r in self.rules if r.active()]
            # XXX: multiple active rules?
            if len(active_rules) > 0:
                return active_rules[0]

            return None

    def get_enabled(self):
        with self.mutex:
            return self.enabled

    def get_on(self):
        with self.mutex:
            return self.on

    # Misc

    def as_dict(self, key=None):
        rules = []
        for r in self.rules:
            rules.append(r.as_dict())

        all = {"temperatures": self.temperatures,
               "target": self.target,
               "on": self.on,
               "enabled": self.enabled,
               "rules": rules}
        
        if key is not None:
            out = { key: all[key] }
        else:
            out = all

        return out

    def set_from_dict(self, c):
        if 'target' in c:
            self.set_target(c['target'])
        if 'on' in c:
            self.set_on(c['on'])
        if 'enabled' in c:
            self.set_enabled(c['enabled'])
        if 'temperatures' in c:
            self.set_temperatures(c['temperatures'])
        if 'rules' in c:
            rules = []
            for dr in c['rules']:
                r = Rule()
                r.read_dict(dr)
                rules.append(r)
            self.set_rules(rules)

        
def setup():
    global args
    global have_gpio
    global write_logs

    if have_gpio:
        RPi.GPIO.setwarnings(False)
        RPi.GPIO.setmode(RPi.GPIO.BCM)
        RPi.GPIO.setup(HEATING, RPi.GPIO.OUT)
    else:
        warning('GPIO library not found; running without GPIO')

    try:
        os.makedirs(args.log_directory)
    except OSError as e:
        if e.errno != 17:
            warning('could not create log directory `%s\'; logging disabled' % args.log_directory)
            write_logs = False


def get_temperature():
    global warned_about_owb
    global test_temperature

    try:
        f = open('/sys/bus/w1/devices/%s/w1_slave' % SENSOR, 'r')
    except:
        if not warned_about_owb:
            warning('failed to find temperature sensor; using ramping temperature')
            warned_about_owb = True
        test_temperature += 1
        if test_temperature > 40:
            test_temperature = 15
        return test_temperature
        
    l = f.readline()
    l = f.readline()
    f.close()
    return float(l.split()[9].split('=')[1]) / 1000


def update():
    global state
    global current_rule
    
    # Apply rules first
    active_rule = state.get_active_rule()
    if active_rule != current_rule:
        state.set_enabled(active_rule is not None)
        current_rule = active_rule

    # Then handle turning the boiler on or off
    t = state.get_current_temperature()

    if t > (state.get_target() + HYSTERESIS) or not state.get_enabled():
        state.set_on(False)
    elif t < (state.get_target() - HYSTERESIS) and state.get_enabled():
        state.set_on(True)
    
def check():
    global state
    global stop
    while not stop:
        update()
        time.sleep(CHECK_INTERVAL)

def log():
    global state
    global stop
    global args

    while not stop:
        log_file = os.path.join(args.log_directory, time.strftime("%d-%m-%Y.log"))

        temp = get_temperature()

        if state.get_target() is not None and write_logs:
            f = open(log_file, 'a')
            print>>f,'%s %f %f %d %d' % (time.strftime("%H:%M:%S"), temp, state.get_target(), state.get_on(), state.get_enabled())
            f.close()

        state.add_temperature(temp)
        time.sleep(args.log_interval)
  
def test():
    rule = Rule(Rule.MONDAY, 9, 30, 15, 30)
    assert(rule.active(datetime.datetime(2014, 11, 17, 8, 45)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 17, 9, 29)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 17, 9, 31)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 10, 31)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 15, 25)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 15, 25)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 15, 35)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 17, 18, 15)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 18, 15, 25)) == False)

    rule = Rule(Rule.WEDNESDAY, 7, 30, 8, 30)
    assert(rule.active(datetime.datetime(2014, 11, 19, 8, 20)) == True)

def handler(json):
    if json['type'] == 'send_all':
        global state
        server.send(state.as_dict())
    elif json['type'] == 'change':
        state.set_from_dict(json)

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--port', help='port to bind to', type=int, default=80)
parser.add_argument('-d', '--debug', help='enable debugging', action='store_true', default=False)
parser.add_argument('-i', '--log-interval', help='interval in seconds at which to log temperatures', type=int, default=60)
parser.add_argument('-l', '--log-directory', help='directory to log temperatures to', type=str, default='/var/log/heating')
args = parser.parse_args()

if len(sys.argv) > 1 and sys.argv[1] == 'test':
    test()
else:
    setup()

    server = JSONServer(args.port)
    server.handler = handler
    server.start()

    state = State()

    check_thread = threading.Thread(target=check)
    check_thread.start()
    
    log_thread = threading.Thread(target=log)
    log_thread.start()

    while True:
        time.sleep(60)

