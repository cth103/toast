#!/usr/bin/python
#
#    Copyright (C) 2014-2018 Carl Hetherington <cth@carlh.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

have_gpio = True
try:
    import RPi.GPIO
except:
    have_gpio = False

import BaseHTTPServer
import threading
import json
import time
import os
import sys
import datetime
import socket
import argparse
import urlparse
import traceback

import json_server
import util

# GPIO pin of boiler relay
BOILER_GPIO = 2
# Hysteresis in degrees
HYSTERESIS = 0.2
# Interval in seconds to check state and update hardware
CHECK_INTERVAL = 1
# Minutes to keep sensor readings in memory
MEMORY_LOG_MINUTES = 60 * 24 * 7
# Hours of the day to turn off heating automatically in
# case somebody has forgotten
AUTO_OFF_HOURS = [0, 1, 2, 3, 4, 5, 6, 10]
# Default target temperature
DEFAULT_TARGET = 19.0
HUMIDITY_HIGH_THRESHOLD = 72.0
HUMIDITY_LOW_THRESHOLD = 68.0
# Port to talk to nodes on
NODE_PORT = 9142
# Port to listen for ESP8266 UDP broadcasts
BROADCAST_PORT = 9143

class Datum(object):
    def __init__(self, value, time=time.gmtime()):
        self.time = time
        self.value = value

    def as_tuple(self):
        return (time.strftime('%Y-%m-%dT%H:%M:%SZ', self.time), self.value)

class NodeProperties(object):
    def __init__(self, zone, name, actuators, sensors):
        self.zone = zone
        self.name = name
        self.actuators = actuators
        self.sensors = sensors

node_properties = { '600194189ed3': NodeProperties('Bathroom', 'radiator', ['radiator'], ['temperature']),
                    '5ccf7f3ce462': NodeProperties('Bathroom', 'fan', ['fan'], ['humidity']) }

class Node(object):
    """
    Representation of a node: a device which is reading zero or more
    sensors and controlling zero or more actuators.  Used to keep track of the nodes
    in the system (their names and ip addresses etc.) and to communicate
    with the node servers.
    """
    def __init__(self, zone, name, ip, actuators, sensors, port=NODE_PORT):
        self.zone = zone
        self.name = name
        self.ip = ip
        self.port = port
        self.actuators = actuators
        self.sensors = sensors
        self.actuator_state = dict()
        for a in self.actuators:
            self.actuator_state[a] = None

    def __str__(self):
        return self.name

    def __eq__(self, other):
        if other is None:
            return False

        return self.name == other.name

    def __hash__(self):
        return hash(self.name)

    def connect(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(5)
        s.connect((self.ip, self.port))
        return s

    def set_actuator(self, name, on):
        """Tell the node to turn one of its actuators on or off"""
        if not name in self.actuators:
            raise ValueError('unknown actuator name %s in node %s' % (name, self.name))

    def get_actuator(self, name):
        if not self.has_actuator(name):
            raise ValueError('unknown actuator name %s in node %s' % (name, self.name))
        return self.actuator_state[name]

    def has_actuator(self, name):
        return name in self.actuators

    def get_sensor(self, name):
        """Ask the node for a sensor reading"""
        if not self.has_sensor(name):
            raise ValueError('unknown sensor name %s in node %s' % (name, self.name))
        pass

    def has_sensor(self, name):
        return name in self.sensors

class JSONNode(Node):
    def __init__(self, zone, name, ip):
        super(JSONNode, self).__init__(zone, name, ip, ["radiator"], ["temperature"])

    def set_actuator(self, name, on):
        super(JSONNode, self).set_actuator(name, on)
        if on == self.actuator_state[name]:
            return
        s = self.connect()
        util.send_json(s, {'type': 'set', 'radiator_on': on})
        self.actuator_state[name] = on

    def get_sensor(self, name):
        super(JSONNode, self).get_sensor(name)
        util.verbose("Connecting for temperature of %s:%s" % (self.zone, self.name))
        s = self.connect()
        util.send_json(s, {'type': 'get'})
        j = util.receive_json(s)['temperature']
        util.verbose("Received temperature %f of %s:%s" % (j, self.zone, self.name))
        return Datum(j)

class ESP8266Node(Node):
    def __init__(self, ip, mac):
        if mac in node_properties:
            np = node_properties[mac]
            zone = np.zone
            name = np.name
            actuators = np.actuators
            sensors = np.sensors
        else:
            zone = 'Unknown'
            name = 'Unknown'
            actuators = []
            sensors = []
        super(ESP8266Node, self).__init__(zone, name, ip, actuators, sensors, NODE_PORT)
        self.mac = mac
        self.lock = threading.Lock()

    def set_actuator(self, name, on):
        super(ESP8266Node, self).set_actuator(name, on)
        if on == self.actuator_state[name]:
            return
        try:
            self.lock.acquire()
            s = self.connect()
            if on:
                s.send('on')
            else:
                s.send('off')
            s.close()
        finally:
            self.lock.release()

        self.actuator_state[name] = on

    def get_sensor(self, name):
        super(ESP8266Node, self).get_sensor(name)
        try:
            self.lock.acquire()
            util.verbose("Connecting for %s of %s:%s" % (name, self.zone, self.name))
            s = self.connect()
            if name == 'temperature':
                s.send('temp')
                r = int(s.recv(64)) / 10000.0
            elif name == 'humidity':
                s.send('humidity')
                r = int(s.recv(64)) / 10.0
            util.verbose("Received %s %f of %s:%s" % (name, r, self.zone, self.name))
            s.close()
            return Datum(r)
        finally:
            self.lock.release()

FIXED_NODES = []
FIXED_NODES.append(JSONNode('Sitting room', 'radiator', 'localhost'))

dynamic_nodes = []
dynamic_nodes_mutex = threading.Lock()

def nodes():
    global FIXED_NODES
    global dynamic_nodes
    return FIXED_NODES + dynamic_nodes

def zones():
    z = []
    for n in nodes():
        if n.zone not in z:
            z.append(n.zone)
    return z

def zone_nodes(zone):
    zn = []
    for n in nodes():
        if n.zone == zone:
            zn.append(n)
    return zn

# True to stop all threads
stop = False
# Server which talks to clients
server = None
# True to write logs, false if not
write_logs = True
# Condition variable which when notified will cause
# an update of our state
update_condition = threading.Condition()

def request_update():
    global update_condition
    update_condition.acquire()
    update_condition.notify()
    update_condition.release()

def node_by_name(name):
    """Return the node object which has a particular name"""
    for z in nodes():
        if z.name == name:
            return z

    return None

class Rule:
    """Specification of a target to aim for in a particular zone during a particular time range"""
    MONDAY = 1 << 0
    TUESDAY = 1 << 1
    WEDNESDAY = 1 << 2
    THURSDAY = 1 << 3
    FRIDAY = 1 << 4
    SATURDAY = 1 << 5
    SUNDAY = 1 << 6

    next_id = 0

    def __init__(self, days=0, on_hour=None, on_minute=None, off_hour=None, off_minute=None, target=None, zone=None):
        self.id = Rule.next_id
        Rule.next_id += 1
        self.days = days
        self.on_hour = on_hour
        self.on_minute = on_minute
        self.off_hour = off_hour
        self.off_minute = off_minute
        self.target = target
        self.zone = zone

    def read_dict(self, data):
        if 'id' in data:
            self.id = data['id']
        else:
            self.id = Rule.next_id
            Rule.next_id += 1
        self.days = data['days']
        self.on_hour = data['on_hour']
        self.on_minute = data['on_minute']
        self.off_hour = data['off_hour']
        self.off_minute = data['off_minute']
        self.target = data['target']
        self.zone = data['zone']

    def as_dict(self):
        return {"id": self.id,
                "days": self.days,
                "on_hour": self.on_hour,
                "on_minute": self.on_minute,
                "off_hour": self.off_hour,
                "off_minute": self.off_minute,
                "target": self.target,
                "zone": str(self.zone)}

    def active(self, time=None):
        """
        Return true if this rule is active at the given time (the current
        time is used if time=None).
        """
        if time is None:
            time = datetime.datetime.now()
        if (self.days & (1 << time.weekday())) == 0:
            return False

        if self.on_hour > time.hour or self.off_hour < time.hour:
            return False

        on_ok = self.on_hour < time.hour or self.on_minute <= time.minute
        off_ok = self.off_hour > time.hour or self.off_minute > time.minute

        return on_ok and off_ok

    def __str__(self):
        return '%d: %d %d:%d %d:%d %f %s' % (self.id, self.days, self.on_hour, self.on_minute, self.off_hour, self.off_minute, self.target, self.zone)

    def __eq__(self, other):
        if other is None:
            return False

        on_same = self.on_hour == other.on_hour and self.on_minute == other.on_minute
        off_same = self.off_hour == other.off_hour and self.off_minute == other.off_minute

        return self.id == other.id and self.days == other.days and on_same and off_same and self.zone == other.zone and self.target == other.target

    def __ne__(self, other):
        return not self.__eq__(other)


class State:
    """State of the system"""
    def __init__(self):
        global args

        # Whether the heating is enabled (i.e. checking temperatures and maybe heating)
        self.heating_enabled = False
        # Whether each zone is enabled for heating
        self.zone_heating_enabled = {}
        # Target temperature for each zone
        self.target = {}
        # Whether the boiler is on
        self.boiler_on = False
        # Temperatures in each zone
        self.temperatures = {}
        # Room relative humidities in each zome, relative to outside humidity (positive = more humid)
        self.humidities = {}
        self.rules = []

        self.mutex = threading.Lock()


    # Set methods for use by the server

    def set_heating_enabled(self, enabled):
        changed = False
        with self.mutex:
            if enabled != self.heating_enabled:
                self.heating_enabled = enabled
                changed = True
        if changed:
            server.send(self.as_dict("heating_enabled"))
            request_update()

    def set_zone_heating_enabled(self, zone, enabled):
        changed = False
        with self.mutex:
            if not zone in self.zone_heating_enabled:
                self.zone_heating_enabled[zone] = False
            if self.zone_heating_enabled[zone] != enabled:
                self.zone_heating_enabled[zone] = enabled
                changed = True
        if changed:
            server.send(self.as_dict("zone_heating_enabled"))
            request_update()

    def set_target(self, zone, target):
        changed = False
        with self.mutex:
            if abs(target - self.target[zone]) > 1e-6:
                self.target[zone] = target
                changed = True
        if changed:
            server.send(self.as_dict("target"))
            request_update()

    def set_boiler_on(self, on):
        changed = False
        with self.mutex:
            if on != self.boiler_on:
                self.boiler_on = on
                if have_gpio:
                    RPi.GPIO.output(BOILER_GPIO, self.boiler_on)
                changed = True
        if changed:
            server.send(self.as_dict("boiler_on"))

    def add_temperature(self, zone, t):
        assert(isinstance(t, Datum))
        with self.mutex:
            if not zone in self.temperatures:
                self.temperatures[zone] = []
            self.temperatures[zone].append(t)
            if len(self.temperatures[zone]) > MEMORY_LOG_MINUTES:
                state.temperatures[zone].pop(0)
        server.send(self.as_dict("temperatures"))

    def add_humidity(self, zone, h):
        assert(isinstance(h, Datum))
        with self.mutex:
            if not zone in self.humidities:
                self.humidities[zone] = []
            self.humidities[zone].append(h)
            if len(self.humidities[zone]) > MEMORY_LOG_MINUTES:
                state.humidities[zone].pop(0)
        server.send(self.as_dict("humidities"))

    def set_rules(self, r):
        assert(type(r) is list)
        changed = False
        with self.mutex:
            if self.rules != r:
                self.rules = r
                changed = True
        if changed:
            server.send(self.as_dict("rules"))


    # Get methods for use by the server

    def get_heating_enabled(self):
        with self.mutex:
            return self.heating_enabled

    def get_zone_heating_enabled(self, zone):
        with self.mutex:
            if not zone in self.zone_heating_enabled:
                self.zone_heating_enabled[zone] = False
            return self.zone_heating_enabled[zone]

    def get_target(self, zone):
        with self.mutex:
            if not zone in self.target:
                self.target[zone] = DEFAULT_TARGET
            return self.target[zone]

    def get_boiler_on(self):
        with self.mutex:
            return self.boiler_on

    def get_current_temperature(self, zone):
        t = None
        with self.mutex:
            if not zone in self.temperatures:
                self.temperatures[zone] = []
            if len(self.temperatures[zone]) > 0:
                t = self.temperatures[zone][-1]
        return t

    def get_current_humidity(self, zone):
        t = None
        with self.mutex:
            if not zone in self.humidities:
                self.humidities[zone] = []
            if len(self.humidities[zone]) > 0:
                t = self.humidities[zone][-1]
        return t

    def get_active_rules(self):
        with self.mutex:
            return [r for r in self.rules if r.active()]


    # Misc

    def as_dict(self, key=None, all_values=True):
        """
        Return some or all state as dict; all state is returned
        if key is None.
        """
        zone_heating_enabled = []
        for k, v in self.zone_heating_enabled.iteritems():
            zone_heating_enabled.append({"zone": k, "zone_heating_enabled": v})

        target = []
        for k, v in self.target.iteritems():
            target.append({"zone": k, "target": v})

        temperatures = []
        for k, v in self.temperatures.iteritems():
            if all_values:
                temperatures.append({"zone": k, "temperatures": [i.as_tuple() for i in v]})
            elif len(v) > 0:
                temperatures.append({"zone": k, "temperatures": [v[-1].as_tuple()]})

        humidities = []
        for k, v in self.humidities.iteritems():
            if all_values:
                humidities.append({"zone": k, "humidities": [i.as_tuple() for i in v]})
            elif len(v) > 0:
                humidities.append({"zone": k, "humidities": [v[-1].as_tuple()]})

        rules = []
        for r in self.rules:
            rules.append(r.as_dict())

        any_zone_heating_enabled = False
        for k, v in self.zone_heating_enabled.iteritems():
            if v:
                any_zone_heating_enabled = True

        explanation = ""

        if self.boiler_on and (not self.heating_enabled):
            explanation = "Heating to programmed target"
        elif not self.boiler_on:
            if self.heating_enabled:
                if any_zone_heating_enabled:
                    explanation = "Target temperatures reached"
                else:
                    explanation = "All rooms switched off"
            else:
                explanation = "Heating is switched off"

        all = {"heating_enabled": self.heating_enabled,
               "zone_heating_enabled": zone_heating_enabled,
               "target": target,
               "boiler_on": self.boiler_on,
               "temperatures": temperatures,
               "humidities": humidities,
               "rules": rules,
               "explanation": explanation}

        if key is not None:
            out = { key: all[key] }
        else:
            out = all

        return out

    def set_from_dict(self, c):
        """Set up this object from a dict"""
        if 'heating_enabled' in c:
            self.set_heating_enabled(c['heating_enabled'])
        if 'zone_heating_enabled' in c:
            for z in c['zone_heating_enabled']:
                self.set_zone_heating_enabled(z['zone'], z['zone_heating_enabled'])
        if 'target' in c:
            for z in c['target']:
                self.set_target(z['zone'], z['target'])
        if 'boiler_on' in c:
            self.set_boiler_on(c['boiler_on'])
        # We never expect to receive these data here, since
        # they are managed by the server, sent out to the client(s)
        # and a client never sends them back.
        assert(not 'temperatures' in c)
        assert(not 'humidities' in c)
        if 'rules' in c:
            rules = []
            for dr in c['rules']:
                r = Rule()
                r.read_dict(dr)
                rules.append(r)
            self.set_rules(rules)

def setup():
    global args
    global have_gpio
    global write_logs

    if have_gpio:
        RPi.GPIO.setwarnings(False)
        RPi.GPIO.setmode(RPi.GPIO.BCM)
        RPi.GPIO.setup(BOILER_GPIO, RPi.GPIO.OUT)
    else:
        util.warning('GPIO library not found; running without GPIO')

    try:
        os.makedirs(args.log_directory)
    except OSError as e:
        if e.errno != 17:
            util.warning('could not create log directory `%s\'; logging disabled' % args.log_directory)
            write_logs = False

def update():
    """
    The actual decision-making part: take inputs and decide which actuators should be on and
    whether or not the boiler should be on.
    """
    global state

    # Apply auto-off
    time = datetime.datetime.now()
    if time.minute == 0 and time.hour in AUTO_OFF_HOURS and state.get_heating_enabled():
        state.set_heating_enabled(False)
        util.verbose('turned off automatically at %d:%02d' % (time.hour, time.minute))

    # Work out whether each zone's heating is enabled and what its temperature should be

    heating_enabled = False
    zone_heating_enabled = {}
    target = {}

    for z in zones():
        zone_heating_enabled[z] = False
        target[z] = DEFAULT_TARGET

    rules = state.get_active_rules()
    if len(rules) > 0:
        # If there are active rules they dictate everything
        for r in state.get_active_rules():
            heating_enabled = True
            zone_heating_enabled[r.zone] = True
            target[r.zone] = r.target
    else:
        # Use current state as there are no active rules
        heating_enabled = state.get_heating_enabled()
        for z in zones():
            zone_heating_enabled[z] = state.get_zone_heating_enabled(z)
            target[z] = state.get_target(z)

    note = ''

    # Zone radiators on or off
    for z in zones():
        for n in zone_nodes(z):
            if not n.has_actuator('radiator'):
                continue
            try:
                if zone_heating_enabled[z]:
                    t = state.get_current_temperature(z)
                    if t is not None:
                        if t.value > (target[z] + HYSTERESIS):
                            n.set_actuator('radiator', False)
                            note += '%s off ' % z
                        elif t.value < (target[z] - HYSTERESIS):
                            n.set_actuator('radiator', True)
                            note += '%s on ' % z
                else:
                    n.set_actuator('radiator', False)
            except (socket.error, util.Error) as e:
                util.warning('could not instruct zone %s (%s)' % (z, e))
                pass

    heat_required = False
    for z in zones():
        for n in zone_nodes(z):
            if n.has_actuator('radiator') and n.get_actuator('radiator'):
                heat_required = True

    # Then turn the boiler on or off
    state.set_boiler_on(heat_required and heating_enabled)

    # Humidity
    for z in zones():
        hum = state.get_current_humidity(z)
        if hum is not None:
            if hum.value > HUMIDITY_HIGH_THRESHOLD:
                for n in zone_nodes(z):
                    if n.has_actuator('fan'):
                        n.set_actuator('fan', True)
            elif hum.value < HUMIDITY_LOW_THRESHOLD:
                for n in zone_nodes(z):
                    if n.has_actuator('fan'):
                        n.set_actuator('fan', False)

def broadcast_listen():
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind(("0.0.0.0", BROADCAST_PORT))
    while True:
        data, addr = sock.recvfrom(64)
        if data.startswith('Hello heating'):
            mac = data[14:]
            try:
                dynamic_nodes_mutex.acquire()
                got = False
                for n in dynamic_nodes:
                    if n.mac == mac:
                        got = True
                if not got:
                    util.verbose('Adding dynamic node at %s %s' % (addr[0], mac))
                    dynamic_nodes.append(ESP8266Node(addr[0], mac))
            finally:
                dynamic_nodes_mutex.release()

def check():
    """Body of the "check" thread which converts demand to "output" state."""
    global state
    global stop
    global update_condition
    while not stop:
        try:
            update()
        except Exception as e:
            traceback.print_exc()
        update_condition.acquire()
        update_condition.wait(CHECK_INTERVAL)
        update_condition.release()

def get_sensor(node, name):
    if not node.has_sensor(name):
        return None
    try:
        datum = node.get_sensor(name)
    except Exception as e:
        traceback.print_exc(file=sys.stdout)
        util.warning('could not get %s from %s:%s (%s)' % (name, node.zone, node.name, e))
        return None

    return datum


def log():
    """Body of the "log" thread which logs various bits of state."""
    global state
    global stop
    global args

    while not stop:
        log_file = os.path.join(args.log_directory, time.strftime("%d-%m-%Y.log"))

        for z in zones():
            for n in zone_nodes(z):
                datum = get_sensor(n, 'temperature')
                if datum is not None:
                    if write_logs:
                        f = open(log_file, 'a')
                        print>>f,'%s %f %f %d %d' % (time.strftime("%H:%M:%S"), datum.value, state.get_target(z), state.get_boiler_on(), state.get_heating_enabled())
                        f.close()

                    state.add_temperature(z, datum)

                datum = get_sensor(n, 'humidity')
                if datum is not None:
                    if write_logs:
                        f = open(log_file, 'a')
                        print>>f,'%s %d %f %d %d' % (time.strftime("%H:%M:%S"), datum.value, state.get_target(z), state.get_boiler_on(), state.get_heating_enabled())
                        f.close()

                    state.add_humidity(z, datum)

        time.sleep(args.log_interval)

def test():
    rule = Rule(Rule.MONDAY, 9, 30, 15, 30)
    assert(rule.active(datetime.datetime(2014, 11, 17, 8, 45)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 17, 9, 29)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 17, 9, 31)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 10, 31)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 15, 25)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 15, 25)) == True)
    assert(rule.active(datetime.datetime(2014, 11, 17, 15, 35)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 17, 18, 15)) == False)
    assert(rule.active(datetime.datetime(2014, 11, 18, 15, 25)) == False)

    rule = Rule(Rule.WEDNESDAY, 7, 30, 8, 30)
    assert(rule.active(datetime.datetime(2014, 11, 19, 8, 20)) == True)

def handler(json):
    if json['type'] == 'ping':
        server.send({'type': 'pong'})
    elif json['type'] == 'send_basic':
        global state
        server.send(state.as_dict(all_values=False))
    elif json['type'] == 'send_all':
        global state
        server.send(state.as_dict())
    elif json['type'] == 'change':
        state.set_from_dict(json)

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--port', help='port to bind to', type=int, default=80)
parser.add_argument('-i', '--log-interval', help='interval in seconds at which to log sensor readings', type=int, default=60)
parser.add_argument('-l', '--log-directory', help='directory to log sensor readings to', type=str, default='/var/log/toast')
args = parser.parse_args()

if len(sys.argv) > 1 and sys.argv[1] == 'test':
    test()
else:
    setup()

    server = json_server.Server(args.port)
    server.handler = handler
    server.start()

    state = State()

    check_thread = threading.Thread(target=check)
    check_thread.start()

    log_thread = threading.Thread(target=log)
    log_thread.start()

    broadcast_listen_thread = threading.Thread(target=broadcast_listen)
    broadcast_listen_thread.start()

    while True:
        time.sleep(60)
