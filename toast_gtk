#!/usr/bin/python

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
import gtk
import json
import socket
import threading

import util

SERVER = '192.168.1.1'

class Client:
    def __init__(self):
        self.terminate = False
        self.thread = threading.Thread(target=self.run)
        self.thread.start()
        self.handlers = []
        self.target = dict()
        self.heating_enabled = False

    def changed(self):
        for h in self.handlers:
            h(self)

    def take_target(self, d):
        for x in d:
            self.target[x['zone']] = x['target']

    def run(self):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((SERVER, 80))
        util.send_json(s, {'type': 'send_basic'})
        while not self.terminate:
            json = util.receive_json(s)
            if json is not None:
                for k, v in json.iteritems():
                    if k == 'target':
                        self.take_target(v)
                    elif k == 'heating_enabled':
                        self.heating_enabled = v
                self.changed()
        s.close()

class Target:
    pass

class Toast:
    def __init__(self, client):
        window = Gtk.Window()
        main_vbox = Gtk.VBox()
        window.add(main_vbox)
        self.heating_on = Gtk.CheckButton('On')
        main_vbox.add(self.heating_on)
        self.target_box = Gtk.VBox()
        main_vbox.add(self.target_box)
        window.show_all()

        self.target = dict()

        client.handlers.append(self.state_changed)
        self.state_changed(client)

    def state_changed(self, client):
        self.heating_on.set_active(client.heating_enabled)
        for k, v in client.target.iteritems():
            if not k in self.target:
                target = Target()

                hbox = Gtk.HBox()
                label = Gtk.Label('<b>%s</b>' % k)
                label.set_use_markup(True)
                label.set_xalign(0)
                hbox.add(label)

                target.temperature = Gtk.Label()
                hbox.add(target.temperature)

                self.target_box.add(hbox)
                self.target_box.show_all()

                self.target[k] = target


c = Client()
toast = Toast(c)
Gtk.main()
