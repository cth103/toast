#!/usr/bin/python

import socket
import argparse
import util
import sys
import os
import time

parser = argparse.ArgumentParser()
parser.add_argument('-s', '--summary', action='store_true', help='display system state')
parser.add_argument('-f', '--full', action='store_true', help='display full system state and history')
parser.add_argument('--on', action='store_true', help='turn whole system or zone on')
parser.add_argument('--off', action='store_true', help='turn whole system or zone off')
parser.add_argument('-z', '--zone', help='zone to control')
parser.add_argument('-t', '--target', help='target temperature')
parser.add_argument('--server', help='IP address of server')
parser.add_argument('-p', '--port', help='port to connect to server on', default=80)
parser.add_argument('-j', '--json', help='dump received JSON to stdout', action='store_true', default=False)
args = parser.parse_args()

try:
    f = open(os.path.expanduser('~/.config/toast'), 'r')
    for l in f.readlines():
        s = l.strip().split()
        if len(s) == 2:
            if s[0] == 'server':
                args.server = s[1]
            elif s[0] == 'port':
                args.port = s[1]

except:
    pass

if args.server is None:
    print>>sys.stderr,'No server specified and no configuration file found.'
    sys.exit(1)

def on_off(v):
    if v:
        return 'on'
    else:
        return 'off'

def minutes_ago(datum_time):
    return round((time.mktime(time.gmtime()) - time.mktime(time.strptime(datum_time, '%Y-%m-%dT%H:%M:%SZ'))) / 3600.0)

if args.zone is not None:
    # Get zones and correct args.zone if necessary
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((args.server, int(args.port)))
    util.send_json(s, {'type': 'send_basic'}, False)
    json = util.receive_json(s, False)
    candidates = []
    for t in json['target']:
        if t['zone'].lower().startswith(args.zone):
            candidates.append(t['zone'])

    if len(candidates) > 1:
        print 'Not sure which zone you mean, either:'
        for c in candidates:
            print '\t%s' % c
        sys.exit(1)
    elif len(candidates) == 0:
        print 'Unrecognised zone `%s\'' % (args.zone)
        sys.exit(1)

    args.zone = candidates[0]

def connect():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((args.server, int(args.port)))
    return s

if (args.on or args.off) and args.zone is None:
    util.send_json(connect(), {'type': 'change', 'heating_enabled': args.on}, False)
    s.close()

if (args.on or args.off) and args.zone is not None:
    util.send_json(connect(), {'type': 'change', 'zone_heating_enabled': [{'zone': args.zone, 'zone_heatin_enabled': args.on}]}, False)
    s.close()

if args.target is not None and args.zone is None:
    print>>sys.stderr,'You must specify a zone to set the target temperature for'
    sys.exit(1)

if args.target is not None:
    util.send_json(connect(), {'type': 'change', 'target': [{'zone': args.zone, 'target': float(args.target)}]}, False)
    s.close()

if args.summary:
    s = connect()
    util.send_json(s, {'type': 'send_basic'}, False)
    json = util.receive_json(s, False)
    if args.json:
        print json

    if json['heating_enabled']:
        print 'Heating is on.'
    else:
        print 'Heating is off.'

    longest = 0
    for t in json['target']:
        longest = max(longest, len(t['zone']))

    for t in json['target']:

        enabled = False
        for e in json['zone_heating_enabled']:
            if e['zone'] == t['zone']:
                enabled = e['zone_heating_enabled']

        temperature = "?    "
        temperature_age = "    "
        humidity = "?  "
        humidity_age = "    "
        for e in json['temperatures']:
            if e['zone'] == t['zone']:
                temperature = '%.2f' % e['temperatures'][0][1]
                if minutes_ago(e['temperatures'][0][0]) > 2:
                    temperature_age = '(OLD)'
        for e in json['humidities']:
            if e['zone'] == t['zone']:
                humidity = '%d%%' % e['humidities'][0][1]
                if minutes_ago(e['humidities'][0][0]) > 2:
                    humidity_age = '(OLD)'

        print '%s %s %s %.1f %s %s [%s]' % (t['zone'].ljust(longest + 2), temperature, temperature_age, float(t['target']), humidity, humidity_age, on_off(enabled))

    s.close()

if args.full:
    s = connect()
    util.send_json(s, {'type': 'send_all'}, False)
    json = util.receive_json(s, False)
    print json
    s.close()
